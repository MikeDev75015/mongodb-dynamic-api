version: 2.1
orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0
  slack: circleci/slack@4.12.6
  jq: circleci/jq@2.2.0

aliases:
  - &install-deps
    run:
      name: Install dependencies
      command: npm ci
  - &restore-cache
    restore_cache:
      key: dependency-cache-{{ checksum "package.json" }}
  - &save-cache
    save_cache:
      key: dependency-cache-{{ checksum "package.json" }}
      paths:
        - ./node_modules
  - &persist-dist
    persist_to_workspace:
      root: .
      paths:
        - 'dist'
  - &build-package
    run:
      name: Build
      command: npm run build
  - &update-npm-version
    run:
      name: Update NPM version
      command: 'sudo npm install -g npm@latest'
  - &notify-fail
    slack/notify:
      event: fail
      template: basic_fail_1
  - &notify-success
    slack/notify:
      event: pass
      template: basic_success_1

commands:
  unit-tests-parallelized-command:
    description: "Split and run unit tests with JUnit as reporter"
    steps:
      - run:
          name: Create report folder
          command: mkdir -p reports/junit
      - run:
          name: Split and run unit tests
          command: |
            UT_FILES=$(circleci tests glob "libs/**/*.spec.ts" | circleci tests split --split-by=timings)
            echo $UT_FILES
            npm run test:ci:junit $UT_FILES
          environment:
            JEST_JUNIT_OUTPUT_DIR: reports/junit
      - store_test_results:
          path: reports/junit

  unit-tests-not-parallelized-command:
    description: "Run unit tests with Sonar as reporter"
    steps:
      - run:
          name: Create report folder
          command: mkdir -p reports/sonar
      - run:
          name: Run unit tests
          command: npm run test:ci:sonar
      - store_artifacts:
          path: reports/sonar
          destination: reports/sonar

  git-config-local-user-command:
    description: "Configure the default identity for the git account"
    steps:
      - run: git config credential.helper 'cache --timeout=120'
      - run: git config user.email ${USER_EMAIL}
      - run: git config user.name ${USER_NAME}

  install-github-cli-command:
    description: "Installs the latest Github CLI version"
    steps:
      - jq/install
      - run:
          name: Install Github CLI
          command: |
            LATEST_RELEASE=$(curl -s https://api.github.com/repos/cli/cli/releases/latest)
            VERSION=$(echo $LATEST_RELEASE | jq -r '.tag_name')
            DEB_URL=$(echo $LATEST_RELEASE | jq -r '.assets[].browser_download_url | select(. | contains("linux_amd64.deb"))')
            wget --quiet -O gh_latest.deb $DEB_URL
            sudo apt install ./gh_latest.deb
          description: Gets latest release version of Github CLI

  merge-pull-request-command:
    description: "Merge pull request then delete branch"
    parameters:
      branch:
        type: string
    steps:
      - run:
          name: Checkout to the << parameters.branch >> branch
          command: git checkout << parameters.branch >>
      - run:
          name: Merge the pull request and delete the << parameters.branch >> branch
          command: gh pr merge << parameters.branch >> -r -d

  release-command:
    description: "Create release PR on Github"
    steps:
      - run:
          name: Create release PR on Github
          command: npx release-please release-pr
            --token ${GH_TOKEN}
            --repo-url ${GH_OWNER}/${GH_REPO}

  pre-release-command:
    description: "Create prerelease PR on Github"
    steps:
      - run:
          name: Create prerelease PR on Github
          command: npx release-please release-pr
            --token ${GH_TOKEN}
            --repo-url ${GH_OWNER}/${GH_REPO}
            --versioning-strategy prerelease

jobs:
  dependencies-job:
    description: "Install dependencies, update cache"
    docker:
      - image: cimg/node:20.5.0
    resource_class: medium
    steps:
      - checkout
      - *update-npm-version
      - *restore-cache
      - *install-deps
      - *save-cache

  build-job:
    docker:
      - image: cimg/node:20.5.0
    resource_class: medium
    parameters:
      persist:
        type: boolean
        default: false
    steps:
      - checkout
      - *restore-cache
      - *build-package
      - when:
          condition: << parameters.persist >>
          steps:
            - *persist-dist
      - *notify-fail
      - *notify-success

  test-job:
    docker:
      - image: cimg/node:20.5.0
    resource_class: medium
    parallelism: 8
    steps:
      - checkout
      - *restore-cache
      - unit-tests-parallelized-command
      - *notify-fail
      - *notify-success

  sonarcloud-job:
    docker:
      - image: cimg/node:20.5.0
    resource_class: medium
    steps:
      - checkout
      - *restore-cache
      - unit-tests-not-parallelized-command
      - sonarcloud/scan
      - *notify-fail
      - *notify-success

  pre-release-job:
    docker:
      - image: cimg/node:20.5.0
    resource_class: medium
    steps:
      - checkout
      - pre-release-command

  merge-pr-job:
    docker:
      - image: cimg/node:20.5.0
    resource_class: medium
    parameters:
      branch:
        type: string
    steps:
      - checkout
      - git-config-local-user-command
      - install-github-cli-command
      - merge-pull-request-command:
          branch: << parameters.branch >>

workflows:
  ci-default-workflow:
    when:
      not: << pipeline.git.tag >>
    jobs:
      - dependencies-job:
          filters:
            branches:
              ignore:
                - main
                - /^release-please-.+$/
      - build-job:
          requires:
            - dependencies-job
          context: SLACK
          filters:
            branches:
              ignore:
                - main
                - /^release-please-.+$/
      - test-job:
          requires:
            - dependencies-job
          context: SLACK
          filters:
            branches:
              ignore:
                - main
                - /^release-please-.+$/

  cd-merge-prerelease-workflow:
    when:
      matches:
        pattern: "^release-please-.+$"
        value: << pipeline.git.branch >>
    jobs:
      - merge-pr-job:
          branch: << pipeline.git.branch >>
          context:
            - GIT
            - SLACK
          filters:
            branches:
              only:
                - /^release-please-.+$/

  cd-pre-release-workflow:
    when:
      equal: [ << pipeline.git.branch >>, main ]
    jobs:
      - dependencies-job:
          filters:
            branches:
              only:
                - main
      - build-job:
          requires:
            - dependencies-job
          context: SLACK
          filters:
            branches:
              only:
                - main
      - sonarcloud-job:
          requires:
            - dependencies-job
          context:
            - SONARCLOUD
            - SLACK
          filters:
            branches:
              only:
                - main
      - pre-release-job:
          requires:
              - build-job
              - sonarcloud-job
          context:
            - GIT
          filters:
            branches:
              only:
                - main
