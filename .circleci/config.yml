version: 2.1
orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0
  slack: circleci/slack@4.12.6
  jq: circleci/jq@2.2.0
  docker: circleci/docker@2.6.0

executors:
  node:
    docker:
      - image: cimg/node:20.18.1
    resource_class: medium

aliases:
  - &install-deps
    run:
      name: Install dependencies
      command: npm ci
  - &restore-cache
    restore_cache:
      key: dependency-cache-{{ checksum "package.json" }}
  - &save-cache
    save_cache:
      key: dependency-cache-{{ checksum "package.json" }}
      paths:
        - ./node_modules
  - &build-package
    run:
      name: Build
      command: npm run build
  - &update-npm-version
    run:
      name: Update NPM version
      command: 'sudo npm install -g npm@latest'
  - &notify-fail
    slack/notify:
      event: fail
      template: basic_fail_1
  - &notify-success
    slack/notify:
      event: pass
      template: basic_success_1

commands:
  unit-tests-parallelized-command:
    description: "Split and run unit tests with JUnit as reporter"
    steps:
      - run:
          name: Create report folder
          command: mkdir -p reports/junit
      - run:
          name: Split and run unit tests
          command: |
            UT_FILES=$(circleci tests glob "libs/**/*.spec.ts" | circleci tests split --split-by=timings)
            echo $UT_FILES
            npm run test:ci:junit $UT_FILES
          environment:
            JEST_JUNIT_OUTPUT_DIR: reports/junit
      - store_test_results:
          path: reports/junit

  unit-tests-not-parallelized-command:
    description: "Run unit tests with Sonar as reporter"
    steps:
      - run:
          name: Create report folder
          command: mkdir -p reports/sonar
      - run:
          name: Run unit tests
          command: npm run test:ci:sonar
      - store_artifacts:
          path: reports/sonar
          destination: reports/sonar

  git-config-local-user-command:
    description: "Configure the default identity for the git account"
    steps:
      - run: git config credential.helper 'cache --timeout=120'
      - run: git config user.email ${USER_EMAIL}
      - run: git config user.name ${USER_NAME}

  delete-tag-command:
    description: "Delete the tag from the repository"
    parameters:
      tag:
        type: string
    steps:
      - run:
          name: Delete the tag from the repository
          command: git push -d -q https://${GH_TOKEN}@github.com/${GH_OWNER}/${GH_REPO}.git << parameters.tag >>

  install-github-cli-command:
    description: "Installs the latest Github CLI version"
    steps:
      - jq/install
      - run:
          name: Install Github CLI
          command: |
            LATEST_RELEASE=$(curl -s https://api.github.com/repos/cli/cli/releases/latest)
            VERSION=$(echo $LATEST_RELEASE | jq -r '.tag_name')
            DEB_URL=$(echo $LATEST_RELEASE | jq -r '.assets[].browser_download_url | select(. | contains("linux_amd64.deb"))')
            wget --quiet -O gh_latest.deb $DEB_URL
            sudo apt install ./gh_latest.deb
          description: Gets latest release version of Github CLI

  create-release-pr-command:
    description: "Create release or prerelease PR to develop on Github"
    parameters:
      branch:
        type: string
    steps:
      - run:
          name: Create the auto-<< parameters.branch >> branch
          command: git checkout -q -b auto-<< parameters.branch >>
      - run:
          name: Push the auto-<< parameters.branch >> branch on remote
          command: git push -q https://${GH_TOKEN}@github.com/${GH_OWNER}/${GH_REPO}.git auto-<< parameters.branch >>
      - run:
          name: Prepare auto-<< parameters.branch >> with release-it
          command: npm run auto-<< parameters.branch >>
      - run:
          name: Create the PR on Github
          command: |
            VERSION_NUMBER=v$(jq -r '.version' package.json)
            echo ${VERSION_NUMBER}
            gh pr create -R ${GH_OWNER}/${GH_REPO} -H auto-<< parameters.branch >> -B develop --fill-verbose -t "<< parameters.branch >> ${VERSION_NUMBER} created automatically from CircleCI"

  merge-release-pr-command:
    description: "Merge the release PR and automatically delete the branch"
    parameters:
      branch:
        type: string
    steps:
      - run:
          name: Merge the PR and automatically delete the << parameters.branch >> branch
          command: gh pr merge << parameters.branch >> -R ${GH_OWNER}/${GH_REPO} --auto -r -d

  create-develop-pr-command:
    description: "Create PR from develop to main on Github"
    steps:
      - run:
          name: Checkout to develop
          command: git checkout develop
      - run:
          name: Pull develop
          command: git pull https://${GH_TOKEN}@github.com/${GH_OWNER}/${GH_REPO}.git develop
      - run:
          name: Create a pull request from develop to main
          command: |
            VERSION_NUMBER=v$(jq -r '.version' package.json)
            echo ${VERSION_NUMBER}
            gh pr create -R ${GH_OWNER}/${GH_REPO} -H develop -B main --fill-verbose -t "New ${VERSION_NUMBER} created automatically from CircleCI"

  create-version-tags-command:
    description: "Create and push the version tags"
    steps:
      - run:
          name: Checkout to main
          command: git checkout main
      - run:
          name: Pull main
          command: git pull https://${GH_TOKEN}@github.com/${GH_OWNER}/${GH_REPO}.git main
      - run:
          name: Create the release / prerelease version tags
          command: |
            VERSION_NUMBER=v$(jq -r '.version' package.json)
            echo ${VERSION_NUMBER}
            git tag ${VERSION_NUMBER}
            git push https://${GH_TOKEN}@github.com/${GH_OWNER}/${GH_REPO}.git ${VERSION_NUMBER}

  copy-files-command:
    description: "Copy all the required files to dist directory"
    steps:
      - run:
          name: Copy README.md to dist
          command: cp -rf README.md dist
      - run:
          name: Copy CHANGELOG.md to dist
          command: cp -rf CHANGELOG.md dist
      - run:
          name: Copy LICENSE to dist
          command: cp -rf LICENSE dist
      - run:
          name: Copy package.json to dist
          command: cp -rf package.json dist

  publish-npm-command:
    description: "Authenticate to npm account and publish new version"
    parameters:
      branch:
        type: string
    steps:
      - run:
          name: NPM Account Authentication
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
      - run:
          name: Publish << parameters.branch >> on npm
          command: npm run publish-<< parameters.branch >>

jobs:
  dependencies-job:
    description: "Install dependencies, update cache"
    executor: node
    steps:
      - checkout
      - *update-npm-version
      - *restore-cache
      - *install-deps
      - *save-cache

  build-job:
    executor: node
    parameters:
      persist:
        type: boolean
        default: false
    steps:
      - checkout
      - *restore-cache
      - *build-package
      - *notify-fail
      - *notify-success

  test-job:
    executor: node
    parallelism: 8
    steps:
      - checkout
      - *restore-cache
      - unit-tests-parallelized-command
      - *notify-fail
      - *notify-success

  test-with-sonarcloud-job:
    executor: node
    steps:
      - checkout
      - *restore-cache
      - unit-tests-not-parallelized-command
      - sonarcloud/scan
      - *notify-fail
      - *notify-success

  e2e-tests-mongodb-job:
    docker:
      - image: cimg/node:20.18.1
      - image: mongo:latest
        command: --auth
        environment:
          MONGO_INITDB_ROOT_USERNAME: dam-user
          MONGO_INITDB_ROOT_PASSWORD: dam-pass
    resource_class: medium
    steps:
      - checkout
      - *restore-cache
      - setup_remote_docker
      - run:
          name: Wait for MongoDB to start
          command: dockerize -wait tcp://localhost:27017 -timeout 1m
      - run:
          name: Install mongosh
          command: |
            npm install -g mongosh
            mongosh --version
      - run:
          name: Create dam-db database with dam-user as dbOwner
          command: |
            mongosh --host localhost:27017 -u dam-user -p dam-pass --authenticationDatabase admin --eval "db.getSiblingDB('dam-db').createUser({user: 'dam-user', pwd: 'dam-pass', roles: [{role: 'dbOwner', db: 'dam-db'}]})"
      - run:
          name: Run E2E tests
          command: npm run test-e2e:ci
      - *notify-fail
      - *notify-success

  merge-release-pr-job:
    executor: node
    parameters:
      branch:
        type: string
    steps:
      - checkout
      - *restore-cache
      - git-config-local-user-command
      - install-github-cli-command
      - merge-release-pr-command:
          branch: << parameters.branch >>
      - *notify-fail
      - *notify-success

  create-develop-pr-job:
    executor: node
    steps:
      - checkout
      - *restore-cache
      - git-config-local-user-command
      - install-github-cli-command
      - create-develop-pr-command
      - *notify-fail
      - *notify-success

  create-version-tags-job:
    executor: node
    steps:
      - checkout
      - *restore-cache
      - git-config-local-user-command
      - install-github-cli-command
      - create-version-tags-command
      - *notify-fail
      - *notify-success

  publish-release-job:
    executor: node
    parameters:
      branch:
        type: string
    steps:
      - checkout
      - *restore-cache
      - *build-package
      - copy-files-command
      - publish-npm-command:
          branch: << parameters.branch >>
      - *notify-fail
      - *notify-success

workflows:
  ci-default-workflow:
    when:
      not: << pipeline.git.tag >>
    jobs:
      - dependencies-job:
          filters:
            branches:
              ignore:
                - main
                - develop
                - auto-prerelease
                - auto-release
      - build-job:
          requires:
            - dependencies-job
          context: SLACK
          filters:
            branches:
              ignore:
                - main
                - develop
                - auto-prerelease
                - auto-release
      - test-job:
          requires:
            - dependencies-job
          context: SLACK
          filters:
            branches:
              ignore:
                - main
                - develop
                - auto-prerelease
                - auto-release

  ci-develop-workflow:
    when:
      equal: [ << pipeline.git.branch >>, develop ]
    jobs:
      - dependencies-job:
          filters:
            branches:
              only: develop
      - test-with-sonarcloud-job:
          requires:
            - dependencies-job
          context:
            - SONARCLOUD
            - SLACK
          filters:
            branches:
              only: develop
      - e2e-tests-mongodb-job:
          requires:
            - dependencies-job
          context:
            - SLACK
          filters:
            branches:
              only: develop
      - confirm-develop-pr-job:
          type: approval
          requires:
            - test-with-sonarcloud-job
            - e2e-tests-mongodb-job
          filters:
            branches:
              only: develop
      - create-develop-pr-job:
          requires:
            - confirm-develop-pr-job
          context:
            - SONARCLOUD
            - GIT
            - SLACK
          filters:
            branches:
              only: develop

  ci-main-workflow:
    when:
      equal: [ << pipeline.git.branch >>, main ]
    jobs:
      - dependencies-job:
          filters:
            branches:
              only: main
      - create-version-tags-job:
          requires:
            - dependencies-job
          context:
            - GIT
            - SLACK
          filters:
            branches:
              only: main
      - test-with-sonarcloud-job:
          requires:
            - dependencies-job
          context:
            - SONARCLOUD
            - SLACK
          filters:
            branches:
              only: main

  cd-prerelease-version-workflow:
    when:
      matches:
        pattern: /^v\d+\.\d+\.\d+\-beta\.\d+$/
        value: << pipeline.git.tag >>
    jobs:
      - dependencies-job:
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^v\d+\.\d+\.\d+\-beta\.\d+$/
      - publish-release-job:
          name: publish-prerelease-job
          requires:
            - dependencies-job
          branch: prerelease
          context:
            - GIT
            - SLACK
            - NPM
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^v\d+\.\d+\.\d+\-beta\.\d+$/

  cd-release-version-workflow:
    when:
      matches:
        pattern: /^v\d+\.\d+\.\d+$/
        value: << pipeline.git.tag >>
    jobs:
      - dependencies-job:
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^v\d+\.\d+\.\d+$/
      - publish-release-job:
          requires:
            - dependencies-job
          branch: release
          context:
            - GIT
            - SLACK
            - NPM
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^v\d+\.\d+\.\d+$/
